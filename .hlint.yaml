- ignore:
    name: "Use newtype instead of data"
- ignore:
    name: "Replace case with fromMaybe"
- ignore:
    name: "Replace case with maybe"
- ignore:
    name: "Fuse on/on"
- ignore:
    name: "Use tuple-section"
- ignore:
    name: "Use underscore"
- ignore:
    name: "Use ++"
- ignore:
    name: "Use ||"
- ignore:
    name: "Use <$>"
- ignore:
    name: "Use unless"
- ignore:
    name: "Use uncurry"
- ignore:
    name: "Use const"
- ignore:
    name: "Use lambda"
- ignore:
    name: "Use void"
- ignore:
    name: "Use record patterns"
- ignore:
    name: "Avoid lambda using `infix`"

- functions:
  - name: setTitle
      - Salsa.Party.Web.Server.Handler.Home
      - Salsa.Party.Web.Server.Handler.Admin.Panel
    message: Use setTitleI instead.
  - name: setDescription
    within:
      - Salsa.Party.Web.Server.Handler.Admin.Panel
      - Salsa.Party.Web.Server.Handler.Event.ExternalEvent.HTML
      - Salsa.Party.Web.Server.Handler.Event.Party.HTML
    message: Use setDescriptionI instead.
  - name: addMessage
    within:
      - Salsa.Party.Web.Server.Handler.Admin.Panel
      - Salsa.Party.Web.Server.Handler.Admin.Prospect
    message: Use addMessageI instead.
  - name: permissionDenied
    within: []
    message: Use permissionDeniedI instead.

  - {name: unsafeDupablePerformIO, within: []} # Unsafe
  - {name: unsafeInterleaveIO, within: []} # Unsafe
  - {name: unsafeFixIO, within: []} # Unsafe
  - {name: unsafePerformIO, within: []} # Unsafe

  # _VERY_ hard to get right, use the async library instead.
  # See also https://github.com/informatikr/hedis/issues/165
  - {name: forkIO, within: []}
  # Mostly impossible to get right, rethink what you're doing entirely.
  # See also https://www.reddit.com/r/haskell/comments/jsap9r/how_dangerous_is_forkprocess/
  - {name: forkProcess, within: []}

  - {name: throw, within: []} # Don't throw from pure code, use throwIO instead.
  - name: Prelude.error
    within:
      - 'Salsa.Party.DB.Migration'
 
  - {name: Data.List.head, within: []} # Partial, use `listToMaybe` instead.
  - {name: Data.List.tail, within: []} # Partial
  - {name: Data.List.init, within: []} # Partial
  - {name: Data.List.last, within: []} # Partial
  - {name: 'Data.List.!!', within: []} # Partial
  - {name: Data.List.genericIndex, within: []} # Partial
 
  # Same, but for Data.Text
  - {name: Data.Text.head, within: []}
  - {name: Data.Text.tail, within: []}
  - {name: Data.Text.init, within: []}
  - {name: Data.Text.last, within: []}
  
  - {name: minimum, within: []} # Partial
  - {name: minimumBy, within: []} # Partial
  - {name: maximum, within: []} # Partial
  - {name: maximumBy, within: []} # Partial

  # Same, but for Data.Text
  - {name: Data.Text.maximum, within: []}
  - {name: Data.Text.minimum, within: []}

  - {name: GHC.Enum.pred, within: []} # Partial
  - {name: GHC.Enum.suc, within: []} # Partial
  - {name: GHC.Enum.toEnum, within: []} # Partial
  - {name: GHC.Enum.fromEnum, within: []} # Does not do what you think it does.
  - {name: GHC.Enum.enumFrom, within: []} # Does not do what you think it does, depending on the type.
  - {name: GHC.Enum.enumFromThen, within: []} # Does not do what you think it does, depending on the type.
  - {name: GHC.Enum.enumFromTo, within: []} # Does not do what you think it does, depending on the type.
  - {name: GHC.Enum.enumFromThenTo, within: []} # Does not do what you think it does, depending on the type.
  
  - {name: unless, within: []} # Really confusing, use 'when' instead.
  
  - {name: nub, within: []} # O(n^2)

  - {name: Data.Foldable.foldl, within: []} # Lazy. Use foldl' instead.
  - {name: Data.Foldable.sum, within: []} # Lazy accumulator
  - {name: Data.Foldable.product, within: []} # Lazy accumulator

    #   # Does unexpected things, see
    #   # https://github.com/NorfairKing/haskell-WAT#real-double
    #   - {name: realToFrac, within: []}
 
  # Don't use string for command-line output.
  - {name: System.IO.putChar, within: []}
  - {name: System.IO.putStr, within: []}
  - {name: System.IO.putStrLn, within: []}
  - {name: System.IO.print, within: []}
 
  # Don't use string for command-line input either.
  - {name: System.IO.getChar, within: []}
  - {name: System.IO.getLine, within: []}
  - {name: System.IO.getContents, within: []} # Does lazy IO.
  - {name: System.IO.interact, within: []}
  - {name: System.IO.readIO, within: []}
  - {name: System.IO.readLn, within: []}
  
  # Don't use strings to interact with files
  - {name: System.IO.readFile, within: []}
  - {name: System.IO.writeFile, within: []}
  - {name: System.IO.appendFile, within: []}

 
  # Throws on invalid UTF8
  - name: Data.Text.Encoding.decodeUtf8
    within:
      - Salsa.Party.OptParse

  
  - {name: fromJust, within: []} # Partial

  - {name: 'read', within: []} # Partial, use `Text.Read.readMaybe` instead.
  
  # Deprecated, use `pure` instead.
  # See https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return
  - {name: 'return', within: []}

  # Can succeed in dev, but fail in prod, because of encoding guessing
  # It's also Lazy IO.
  # See https://www.snoyman.com/blog/2016/12/beware-of-readfile/ for more info.
  - {name: Data.Text.IO.readFile, within: []}
  - {name: Data.Text.IO.Lazy.readFile, within: []}

- modules:
  - { name: Control.Lens, within: [] }

- extensions:
  - { name: DeriveAnyClass, within: [] } # Dangerous

  - { name: DuplicateRecordFields, within: [] }

  - { name: NamedFieldPuns, within: [] }
  - { name: TupleSections, within: [] }
  - { name: OverloadedLabels, within: [] }
